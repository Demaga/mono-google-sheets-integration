function onOpen() {
    // —Å—Ç–≤–æ—Ä—é—î–º–æ –≤–∫–ª–∞–¥–∫—É –∑ –¥–≤–æ–º–∞ –∫–Ω–æ–ø–∫–∞–º–∏
    var ui = SpreadsheetApp.getUi();
    ui.createMenu('üò∫ Mono Menu')
        .addItem('üí≥ –ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –Ω–æ–≤—ñ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó', 'uploadAllTransactions')
        .addItem('‚ùóÔ∏è –°—Ç–≤–æ—Ä–∏—Ç–∏/–ø–µ—Ä–µ—Å—Ç–≤–æ—Ä–∏—Ç–∏ —Ç–∞–±–ª–∏—á–∫—É', 'initialCreate')
        .addToUi();
}

// –æ—Ç—Ä–∏–º—É—î–º–æ —Ç–æ–∫–µ–Ω –ú–æ–Ω–æ–±–∞–Ω–∫—É
const MONO_TOKEN = getScriptSecret("MONO_TOKEN")

let columns = [
    "–î–∂–µ—Ä–µ–ª–æ", "–ë–∞–ª–∞–Ω—Å", "–°—É–º–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó", "–ö–µ—à–±–µ–∫", "–û–ø–∏—Å",
    "–ö–æ–º–µ–Ω—Ç–∞—Ä", "–ß–∞—Å —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó", "–ö–∞—Ç–µ–≥–æ—Ä—ñ—è"
]

let columnsWidths = [85, 75, 130, 75, 250, 130, 150, 90]

let floatColumns = ["–ë–∞–ª–∞–Ω—Å", "–°—É–º–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó", "–ö–µ—à–±–µ–∫"]
let textColumns = ["–û–ø–∏—Å", "–ö–æ–º–µ–Ω—Ç–∞—Ä"]
let datetimeColumns = ["–ß–∞—Å —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó"]

let categories = [
    "üçΩÔ∏è –ö–∞—Ñ–µ —ñ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∏", "üíÖ –ö—Ä–∞—Å–∞ —ñ –∑–¥–æ—Ä–æ–≤ º—è", "üõí –ú–∞–≥–∞–∑–∏–Ω–∏", "üëï –û–¥—è–≥", "üíÉ –í—ñ–¥–ø–æ—á–∏–Ω–æ–∫ —ñ —Ä–æ–∑–≤–∞–≥–∏",
    "üè† –ü–ª–∞—Ç–µ–∂—ñ —ñ –∫–æ–º—ñ—Å—ñ—ó", "üéÅ –ü–æ–¥–∞—Ä—É–Ω–∫–∏", "üöå –ü—Ä–æ—ó–∑–¥", "üéó –ë–ª–∞–≥–æ–¥—ñ–π–Ω—ñ—Å—Ç—å", "–Ü–Ω—à–µ"
]

let sources = ["Mono", "–ì–æ—Ç—ñ–≤–∫–∞"]

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–æ–≤–æ—ó —Å—Ç–æ—Ä—ñ–Ω–∫–∏ –∑ –¥–µ—Ñ–æ–ª—Ç–Ω–∏–º–∏ –∫–æ–ª–æ–Ω–∫–∞–º–∏ —Ç–∞ —Ñ–æ—Ä–º–∞—Ç–∞–º–∏
function initialCreate() {
    let ss = SpreadsheetApp.getActiveSpreadsheet();

    const sheetName = "–£—Å—ñ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó";
    let oldSheet = ss.getSheetByName(sheetName);
    // –≤–∏–¥–∞–ª—è—î–º–æ —Å—Ç–æ—Ä—ñ–Ω–∫—É —è–∫—â–æ –≤–æ–Ω–∞ –≤–∂–µ —ñ—Å–Ω—É—î
    if (oldSheet) {
        ss.deleteSheet(oldSheet);
    }
    // —ñ —Å—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤—É —Å—Ç–æ—Ä—ñ–Ω–∫—É
    let newSheet = ss.insertSheet(sheetName, 0);


    // –î–æ–¥–∞—î–º–æ —Ä—è–¥–æ–∫ –∑ header-–æ–º.
    let headerRowRange = newSheet.getRange(1, 1, 1, columns.length);
    headerRowRange.setValues([columns]);
    headerRowRange.setFontWeight("bold");
    newSheet.setFrozenRows(1);

    // –î–æ–¥–∞—î–º–æ —Ñ—ñ–ª—å—Ç—Ä–∏ –ø–æ –∫–æ–ª–æ–Ω–∫–∞—Ö
    let dataRange = newSheet.getDataRange();
    dataRange.createFilter();

    // –û—Ç—Ä–∏–º—É—î–º–æ –¥—ñ–∞–ø–∞–∑–æ–Ω —Ü—ñ—î—ó —Ç–∞–±–ª–∏—Ü—ñ –¥–ª—è –ø–æ–¥–∞–ª—å—à–æ—ó —Ä–æ–±–æ—Ç–∏
    let maxRows = newSheet.getMaxRows();
    let lastColumn = newSheet.getLastColumn();
    let range = newSheet.getRange(1, 1, maxRows, lastColumn);

    // –ó–º—ñ–Ω—é—î–º–æ –∫–æ–ª—å–æ—Ä–æ–≤—É —Å—Ö–µ–º—É —Ç–∞–±–ª–∏—Ü—ñ
    range.applyRowBanding(SpreadsheetApp.BandingTheme.YELLOW);

    // –ó–º—ñ–Ω—é—î–º–æ —à–∏—Ä–∏–Ω—É –∫–æ–ª–æ–Ω–æ–∫
    for (const [index, width] of columnsWidths.entries()) {
        newSheet.setColumnWidth(index + 1, width);
    }

    // –ó–º—ñ–Ω—é—î–º–æ —Ç–∏–ø –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–Ω—è –∑–Ω–∞—á–µ–Ω—å –≤ –∫–ª—ñ—Ç–∏–Ω—Ü—ñ
    range.setWrapStrategy(SpreadsheetApp.WrapStrategy.CLIP);

    // –°—Ç–≤–æ—Ä—é—î–º–æ —Å–ø–∞–¥–Ω–µ –º–µ–Ω—é –¥–ª—è –∫–æ–ª–æ–Ω–∫–∏ "–î–∂–µ—Ä–µ–ª–æ"
    let sourceColumnIndex = columns.indexOf("–î–∂–µ—Ä–µ–ª–æ") + 1;
    let sourceColumn = newSheet.getRange(2, sourceColumnIndex, maxRows); // start from 2 to ignore header
    let sourceRule = SpreadsheetApp.newDataValidation().requireValueInList(sources).build();
    sourceColumn.setDataValidation(sourceRule);

    // –°—Ç–≤–æ—Ä—é—î–º–æ —Å–ø–∞–¥–Ω–µ –º–µ–Ω—é –¥–ª—è –∫–æ–ª–æ–Ω–∫–∏ "–ö–∞—Ç–µ–≥–æ—Ä—ñ—è"
    let catColumnIndex = columns.indexOf("–ö–∞—Ç–µ–≥–æ—Ä—ñ—è") + 1;
    let catColumn = newSheet.getRange(2, catColumnIndex, maxRows); // start from 2 to ignore header
    let catRule = SpreadsheetApp.newDataValidation().requireValueInList(categories).build();
    catColumn.setDataValidation(catRule);

    // –ü—Ä–∏–º—ñ–Ω—è—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω—ñ —Ç–∏–ø–∏ –¥–∞–Ω–∏—Ö –ø–æ –∫–æ–ª–æ–Ω–∫–∞–º
    applyFormating(floatColumns, newSheet, "#,##0.00");
    applyFormating(textColumns, newSheet, "@")
    applyFormating(datetimeColumns, newSheet, "ddd, dd.mm.yyyy, hh:mm");
}

// –î–æ–ø–æ–º—ñ–∂–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è —Ç–æ–≥–æ, —â–æ–± –∑–º—ñ–Ω—é–≤–∞—Ç–∏ —Ç–∏–ø–∏ –¥–∞–Ω–∏—Ö –ø–æ –∫–æ–ª–æ–Ω–∫–∞—Ö
function applyFormating(columnsToApply, sheet, format) {
    let ranges = columnsToApply.map(column => {
        let columnIndex = columns.indexOf(column) + 1;
        let columnRange = sheet.getRange(1, columnIndex, sheet.getMaxRows(), 1);
        return columnRange;
    });
    ranges.map(range => { range.setNumberFormat(format); });
}

// –ó–º—ñ–Ω–Ω–∞ —è–∫–∞ –ø–æ–∫–∞–∑—É—î —á–∞—Å –æ—Å—Ç–∞–Ω–Ω—å–æ–≥–æ –∑–∞–ø–∏—Ç—É –Ω–∞ Mono API
var lastApiRequest;

// –§—É–Ω–∫—Ü—ñ—è, —è–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂—É—î –Ω–æ–≤—ñ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó –≤ —Ç–∞–±–ª–∏—á–∫—É
function uploadAllTransactions() {
    let ss = SpreadsheetApp.getActiveSpreadsheet();
    let sheet = ss.getSheetByName("–£—Å—ñ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó");
    var headers = sheet.getRange(1, 1, 1, sheet.getLastColumn()).getValues()[0];
    Logger.log(`–ù–∞—è–≤–Ω—ñ –∫–æ–ª–æ–Ω–∫–∏: ${headers}`)

    let to = Date.now();
    let from = getLatestTransactionTs() + 1001;
    let periods = getTimePeriods(from, to)

    periods
        .forEach(
            ([from, to]) => {

                let descriptionColumn = sheet.getRange(2, headers.indexOf("–û–ø–∏—Å") + 1, sheet.getLastRow(), 1).getValues()
                let categoryColumn = sheet.getRange(2, headers.indexOf("–ö–∞—Ç–µ–≥–æ—Ä—ñ—è") + 1, sheet.getLastRow(), 1).getValues()

                let transactions = getTransactions(from, to)
                let transactionsCnt = transactions.length
                let entries = [];
                for (let step = transactionsCnt - 1; step >= 0; step--) {
                    var transaction = transactions[step]
                    // Loop through the rows from top to bottom to find the last row with the same description
                    // start from 1, since 0 is header
                    for (var i = 1; i < descriptionColumn.length; i++) {
                        if (descriptionColumn[i][0] == transaction.description) {
                            transaction.category = categoryColumn[i][0];
                            Logger.log(categoryColumn[i][0])
                            Logger.log(transaction)

                            break;
                        }
                    }

                    // –∑–∞–ø–∏—Å—É—î–º–æ –¥–∞–Ω—ñ –≤ —Ç–∞–±–ª–∏—á–∫—É –≤ –ø–æ—Ä—è–¥–∫—É, —â–æ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î header-—É
                    let entry = headers
                        .map(col => transaction.columnMap().get(col))
                    Logger.log(entry)
                    entries.push(entry);
                }
                try {
                    sheet
                        .insertRowsBefore(2, entries.length)
                        .getRange(2, 1, entries.length, entries[0].length)
                        .setValues(entries);
                } catch (e) {
                    sheet
                        .deleteRows(2, entries.length)
                    throw e;
                }
            }
        )
}

function getLatestTransactionTs() {
    Logger.info("–û—Ç—Ä–∏–º—É—î–º–æ —á–∞—Å –æ—Å—Ç–∞–Ω–Ω—å–æ—ó –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ—ó —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó –ú–æ–Ω–æ–±–∞–Ω–∫—É")
    let ss = SpreadsheetApp.getActiveSpreadsheet();
    let sheet = ss.getSheetByName("–£—Å—ñ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó");
    let transactionsTable = sheet.getDataRange().getValues();
    let headers = transactionsTable.shift();

    let sourceIndex = headers.indexOf("–î–∂–µ—Ä–µ–ª–æ");
    let timestampIndex = headers.indexOf("–ß–∞—Å —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó");

    var from = 0;
    // —ñ—Ç–µ—Ä—É—î–º–æ—Å—å –ø–æ —Ä—è–¥–∫–∞–º –ø–æ–∫–∏ –Ω–µ –∑–Ω–∞–π–¥–µ–º–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—é –ú–æ–Ω–æ–±–∞–Ω–∫—É. –ë–µ—Ä–µ–º–æ —á–∞—Å —Ü—ñ—î—ó —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó
    for (let step = 0; step < transactionsTable.length; step++) {
        let transactionTsCell = transactionsTable[step][timestampIndex]
        if (!transactionTsCell) { continue }

        let transactionTs = transactionTsCell.valueOf()
        if (transactionTs > from && transactionsTable[step][sourceIndex] === 'Mono') {
            from = transactionTs
            Logger.info(`–ß–∞—Å –æ—Å—Ç–∞–Ω–Ω—å–æ—ó —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó - ${new Date(from).toISOString()}`)
            break
        }
    }
    // —è–∫—â–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π –ú–æ–Ω–æ —â–µ –Ω–µ –±—É–ª–æ, —Ç–æ –±–µ—Ä–µ–º–æ –¥–∞–Ω—ñ –∑–∞ –æ—Å—Ç–∞–Ω–Ω—ñ 30 –¥–Ω—ñ–≤
    if (from == 0) {
        let lastMonth = new Date(Date.now() - (30 * 24 * 60 * 60 * 1000)).getTime();
        Logger.info(`–û—Å—Ç–∞–Ω–Ω—å–æ—ó —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ, –∑–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó –∑–∞ –æ—Å—Ç–∞–Ω–Ω—ñ 30 –¥–Ω—ñ–≤ ${lastMonth}`)
        from = lastMonth;
    }
    return from
}

function getTimePeriods(fromRaw, toRaw) {
    // swap if needed
    let [from, to] = fromRaw < toRaw ? [fromRaw, toRaw] : [toRaw, fromRaw];

    Logger.info(`–†–æ–∑–±–∏–≤–∞—î–º–æ –ø–µ—Ä—ñ–æ–¥ (${new Date(from).toISOString()}, ${new Date(to).toISOString()}) –Ω–∞ –ø—Ä–æ–º—ñ–∂–∫–∏ –Ω–µ –±—ñ–ª—å—à—ñ –∑–∞ 31 –¥–æ–±—É + 1 –≥–æ–¥–∏–Ω—É (2682000 —Å–µ–∫—É–Ω–¥)`)
    // "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∏–π —á–∞—Å, –∑–∞ —è–∫–∏–π –º–æ–∂–ª–∏–≤–æ –æ—Ç—Ä–∏–º–∞—Ç–∏ –≤–∏–ø–∏—Å–∫—É ‚Äî 31 –¥–æ–±–∞ + 1 –≥–æ–¥–∏–Ω–∞ (2682000 —Å–µ–∫—É–Ω–¥)" (c) –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü—ñ—è
    const maxPeriodMillis = 2682000 * 1000
    const oneDayMillis = 24 * 60 * 60 * 1000

    var chunks = [];
    // —è–∫—â–æ –º–∏ –Ω–∞–º–∞–≥–∞—î–º–æ—Å—å –æ—Ç—Ä–∏–º–∞—Ç–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó –∑–∞ –ø–µ—Ä—ñ–æ–¥ –º–µ–Ω—à–∏–π –Ω—ñ–∂ maxPeriodMillis,—Ç–æ –ø—Ä–æ—Å—Ç–æ –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ —Ü–µ–π –ø–µ—Ä—ñ–æ–¥
    if (to - from < maxPeriodMillis) {
        chunks.push([from, to]);
    } else {
        // —è–∫—â–æ –ø–µ—Ä—ñ–æ–¥ –±—ñ–ª—å—à–∏–π, —Ç–æ —Ä–æ–∑–±–∏–≤–∞—î–º–æ –π–æ–≥–æ –Ω–∞ –ø—Ä–æ–º—ñ–∂–∫–∏ –Ω–µ –±—ñ–ª—å—à—ñ –∑–∞ maxPeriodMillis - 1 –¥–µ–Ω—å
        for (let chunkFrom = from; chunkFrom < to; chunkFrom += maxPeriodMillis - oneDayMillis) {
            chunkTo = Math.min(chunkFrom + maxPeriodMillis - oneDayMillis, to); // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —â–æ chunkTo –Ω–µ –±—ñ–ª—å—à–µ –Ω—ñ–∂ —Å–∞–º to
            chunks.push([chunkFrom, chunkTo]);
        }
    }

    let prettyChunks = chunks.map(([from, to]) => [new Date(from).toISOString(), new Date(to).toISOString()]);
    Logger.info(`–û—Ç—Ä–∏–º–∞–Ω—ñ –ø—Ä–æ–º—ñ–∂–∫–∏ ${prettyChunks}`)
    return chunks;
}

function getTransactions(from, to) {
    var transactions = [];
    var newFrom = from;
    var transactionsCnt;
    var isInitialRun;
    Logger.info(`–û—Ç—Ä–∏–º—É—î–º–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó –∑–∞ –ø–µ—Ä—ñ–æ–¥ (${new Date(newFrom).toISOString()}, ${new Date(to).toISOString()})`)

    if (!lastApiRequest) {
        lastApiRequest = Date.now();
        isInitialRun = true;
    }

    do {
        // "–∑–∞—Å–∏–Ω–∞—î–º–æ" –±–æ API –º–∞—î –æ–±–º–µ–∂–µ–Ω–Ω—è –Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∑–∞–ø–∏—Ç—ñ–≤ –≤ —Ö–≤–∏–ª–∏–Ω—É
        if (!isInitialRun) {
            let sleepTime = 61 * 1000 - (Date.now() - lastApiRequest)
            Logger.info(`–ß–µ–∫–∞—î–º–æ ${Math.round(sleepTime / 1000)} —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ –Ω–∞—Å—Ç—É–ø–Ω–∏–º –∑–∞–ø–∏—Ç–æ–º`)
            Utilities.sleep(sleepTime)
        }
        newTransactions = makeRequest(newFrom, to)
        lastApiRequest = Date.now()
        if (newTransactions.length == 0 ){break}
        newFrom = newTransactions.at(-1).time
        transactionsCnt = newTransactions.length
        transactions.push(newTransactions)
    } while (transactionsCnt == 500)

    return transactions.flat()
}

function makeRequest(from, to) {
    let account = 0
    let URL_STRING = `https://api.monobank.ua/personal/statement/${account}/${from}/${to}`;
    let options = {
        'method': 'get',
        'headers': { 'X-Token': MONO_TOKEN },
        'muteHttpExceptions': true
    };
    Logger.log(`–†–æ–±–∏–º–æ –∑–∞–ø–∏—Ç: ${URL_STRING}`)

    let response = UrlFetchApp.fetch(URL_STRING, options);
    let responseCode = response.getResponseCode()
    let json = response.getContentText()

    if (responseCode == 429) {
        throw new Error('–ó–∞–±–∞–≥–∞—Ç–æ –∑–∞–ø–∏—Ç—ñ–≤ –∑–∞ –∫–æ—Ä–æ—Ç–∫–∏–π –ø—Ä–æ–º—ñ–∂–æ–∫ —á–∞—Å—É. –ü–æ—á–µ–∫–∞–π—Ç–µ 1 —Ö–≤–∏–ª–∏–Ω—É —ñ —Å–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑')
    } else if (responseCode >= 300) {
        throw new Error(`${responseCode}: ${json}`)
    }

    let transactions = JSON.parse(json).map(MonoTransaction.fromJSON);

    return transactions
}

function getScriptSecret(key) {
    let secret = PropertiesService.getScriptProperties().getProperty(key)
    if (!secret) throw Error(`–ö–ª—é—á ${key} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. –ë—É–¥—å –ª–∞—Å–∫–∞, –¥–æ–¥–∞–π—Ç–µ –π–æ–≥–æ –≤ "–í–ª–∞—Å—Ç–∏–≤–æ—Å—Ç—ñ —Å–∫—Ä–∏–ø—Ç–∞"`)
    return secret
}

class MonoTransaction {
    constructor({
        time,
        description,
        amount,
        cashbackAmount,
        balance,
        comment
    }
    ) {
        // –ø–µ—Ä–µ–≤–æ–¥–∏–º–æ epoch seconds –≤ timestamp, –∞ –∫–æ–ø—ñ–π–∫–∏ –≤ –≥—Ä–∏–≤–Ω—ñ
        this.time = new Date(time * 1000);
        this.amount = amount / 100;
        this.cashbackAmount = cashbackAmount / 100;
        this.description = description;
        this.comment = comment;
        this.balance = balance / 100;

        this.source = 'Mono';
        this.category = '–Ü–Ω—à–µ';
    }

    columnMap(){
        return new Map([
            ["–î–∂–µ—Ä–µ–ª–æ", this.source],
            ["–ë–∞–ª–∞–Ω—Å", this.balance],
            ["–°—É–º–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó", this.amount],
            ["–ö–µ—à–±–µ–∫", this.cashbackAmount],
            ["–û–ø–∏—Å", this.description],
            ["–ö–æ–º–µ–Ω—Ç–∞—Ä", this.comment],
            ["–ß–∞—Å —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó", this.time],
            ["–ö–∞—Ç–µ–≥–æ—Ä—ñ—è", this.category],
        ])
    }

    static fromJSON(json) {
        return new MonoTransaction({
            time: json.time,
            description: json.description,
            amount: json.amount,
            cashbackAmount: json.cashbackAmount,
            balance: json.balance,
            comment: json.comment,
        }
        );
    }
}
